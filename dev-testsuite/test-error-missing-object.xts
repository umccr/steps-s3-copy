import { SFNClient, StartExecutionCommand } from "@aws-sdk/client-sfn";
import { TEST_BUCKET_WORKING_PREFIX } from "./constants.mjs";
import { getPaths, makeObjectDictionaryCsv } from "./util.mjs";
import { waitUntilStateMachineFinishes } from "./lib/steps-waiter.mjs";
import { triggerAndReturnErrorReport } from "./lib/error-reporter.js";
import { WaiterState } from "@smithy/util-waiter";

const sfnClient = new SFNClient({});

const TEST_NAME = "missing object";

/**
 * Execute a test on the given state machine, copying newly created objects from
 * sourceBucket to destinationBucket, and using workingBucket for working artifacts.
 *
 * @param uniqueTestId a unique string for this particular test invocation
 * @param stateMachineArn the state machine under test
 * @param sourceBucket the sourceBucket in which to place test objects
 * @param workingBucket the working sourceBucket to use
 * @param destinationBucket the destination sourceBucket in which to find copied test objects
 */
export async function testErrorMissingObject(
  uniqueTestId: string,
  stateMachineArn: string,
  sourceBucket: string,
  workingBucket: string,
  destinationBucket: string,
) {
  console.log(`Test "${TEST_NAME}" (${uniqueTestId})`);

  const {
    testFolderSrc,
    testFolderDest,
    testFolderObjectsTsvAbsolute,
    testFolderObjectsTsvRelative,
  } = getPaths(
    sourceBucket,
    workingBucket,
    TEST_BUCKET_WORKING_PREFIX,
    destinationBucket,
    uniqueTestId,
  );

  await makeObjectDictionaryCsv(workingBucket, testFolderObjectsTsvAbsolute, {
    [sourceBucket]: ["not-a-file-that-exists.bin"],
  });

  const executionStartResult = await sfnClient.send(
    new StartExecutionCommand({
      stateMachineArn: stateMachineArn,
      name: uniqueTestId,
      input: JSON.stringify({
        sourceFilesCsvKey: testFolderObjectsTsvRelative,
        destinationBucket: destinationBucket,
        destinationPrefixKey: testFolderDest,
        maxItemsPerBatch: 1,
      }),
    }),
  );

  return await triggerAndReturnErrorReport(
    TEST_NAME,
    uniqueTestId,
    executionStartResult.executionArn!,
    180,
    destinationBucket,
    {},
    // TODO: we expect this one to fail - we need to dig deeper in the errors though to make sure our error is correct!
    WaiterState.FAILURE,
  );
}
